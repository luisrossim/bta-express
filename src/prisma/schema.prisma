generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id           Int      @id @default(autoincrement())
  nome         String
  cpf          String   @unique
  telefone     String
  enderecoId   Int      @unique @map("endereco_id")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")
  criadoEm     DateTime @default(now()) @map("criado_em")

  endereco     Endereco       @relation(fields: [enderecoId], references: [id])
  ordemServico OrdemServico[]

  @@map("clientes")
}

model Endereco {
  id                     Int      @id @default(autoincrement())
  cidade                 String
  estado                 String
  hectare                Int?
  coordenadasGeograficas String?  @map("coordenadas_geograficas")
  kmLojaCliente          Int?     @map("km_loja_cliente")
  referencia             String?
  atualizadoEm           DateTime @updatedAt @map("atualizado_em")
  criadoEm               DateTime @default(now()) @map("criado_em")

  cliente Cliente?

  @@map("enderecos")
}

model Usuario {
  id            Int      @id @default(autoincrement())
  nome          String
  email         String   @unique
  password      String
  telefone      String
  roleId        Int      @map("role_id")
  isAtivo       Boolean  @default(true) @map("is_ativo")
  atualizadoEm  DateTime @updatedAt @map("atualizado_em")
  criadoEm      DateTime @default(now()) @map("criado_em")

  role          Role           @relation(fields: [roleId], references: [id])
  etapaUsuario  EtapaUsuario[]
  atribuicoes   Atribuicao[]
  conclusoes HistoricoOS[] @relation("ConcluidoPor")

  @@map("usuarios")
}

model Role {
  id        Int    @id @default(autoincrement())
  descricao String @unique

  usuarios Usuario[]

  @@map("roles")
}

model Anexo {
  id             String   @id @default(uuid())
  ordemServicoId String   @map("ordem_servico_id")
  url            String   @unique
  tipo           String
  descricao      String
  criadoEm       DateTime @default(now()) @map("criado_em")

  ordemServico OrdemServico @relation(fields: [ordemServicoId], references: [id])

  @@map("anexos")
}

model Etapa {
  id        Int    @id @default(autoincrement())
  descricao String @unique

  etapaUsuario EtapaUsuario[]
  historicoOs  HistoricoOS[]

  @@map("etapas")
}

model EtapaUsuario {
  etapaId   Int @map("etapa_id")
  usuarioId Int @map("usuario_id")

  etapa   Etapa   @relation(fields: [etapaId], references: [id])
  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@id([etapaId, usuarioId])
  @@map("etapa_usuario")
}

model OrdemServico {
  id                        String   @id @default(uuid())
  clienteId                 Int      @map("cliente_id")
  hasAutomacao              Boolean?  @map("has_automacao")
  hasOrcamentoBanco         Boolean?  @map("has_orcamento_banco")
  hasProjetoPlantio         Boolean?  @map("has_projeto_plantio")
  quantidadeSetores         Int?     @map("quantidade_setores")
  problema                  String?
  tipoEnergiaId             Int?     @map("tipo_energia_id")
  motobombaId               Int?     @map("motobomba_id")
  polegadasValvulasRegistro Int?     @map("polegadas_valvulas_registro")
  diametroAdutoraMestre     String?  @map("diametro_adutora_mestre")
  observacoes               String?
  criadoEm                  DateTime @default(now()) @map("criado_em")

  cliente                   Cliente       @relation(fields: [clienteId], references: [id])
  tipoEnergia               TipoEnergia?  @relation(fields: [tipoEnergiaId], references: [id])
  motobomba                 Motobomba?    @relation(fields: [motobombaId], references: [id])
  historicoOs               HistoricoOS[]
  anexos                    Anexo[]

  @@map("ordem_servico")
}

model HistoricoOS {
  id             String    @id @default(uuid())
  ordemServicoId String    @map("ordem_servico_id")
  etapaId        Int       @map("etapa_id")
  observacoes    String?
  concluidoPorId Int?      @map("concluido_por")
  concluidoEm    DateTime? @map("concluido_em")
  atualizadoEm   DateTime? @updatedAt @map("atualizado_em")
  criadoEm       DateTime  @default(now()) @map("criado_em")

  ordemServico OrdemServico @relation(fields: [ordemServicoId], references: [id])
  etapa        Etapa        @relation(fields: [etapaId], references: [id])
  concluidoPor   Usuario?  @relation("ConcluidoPor", fields: [concluidoPorId], references: [id])
  atribuicoes  Atribuicao[]

  @@map("historico_os")
}

model Atribuicao {
  historicoOsId String @map("historico_os_id")
  usuarioId     Int    @map("usuario_id")

  historicoOs HistoricoOS @relation(fields: [historicoOsId], references: [id])
  usuario     Usuario     @relation(fields: [usuarioId], references: [id])

  @@id([historicoOsId, usuarioId])
  @@map("atribuicoes")
}

model TipoEnergia {
  id           Int    @id @default(autoincrement())
  descricao    String

  ordemServico OrdemServico[]

  @@map("tipo_energia")
}

model Motobomba {
  id                  Int      @id @default(autoincrement())
  codigoIdentificacao String   @map("codigo_identificacao")
  modelo              String
  marcaId             Int      @map("marca_id")
  cv                  String
  isAtivo             Boolean  @default(true) @map("is_ativo")
  criadoEm            DateTime @default(now()) @map("criado_em")

  marca               Marca         @relation(fields: [marcaId], references: [id])
  ordemServico        OrdemServico[]

  @@map("motobombas")
}

model Marca {
  id   Int    @id @default(autoincrement())
  nome String

  motobombas Motobomba[]

  @@map("marcas")
}
